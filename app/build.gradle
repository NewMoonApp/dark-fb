apply plugin: 'com.android.application'
apply plugin: 'com.bugsnag.android.gradle'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'com.gladed.androidgitversion'

apply plugin: 'io.fabric'


buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.moowork.gradle:gradle-node-plugin:${Versions.nodeGradle}"
    }
}

apply plugin: com.moowork.gradle.node.NodePlugin

apply from: '../spotless.gradle'
group = APP_GROUP

android {
    compileSdkVersion Versions.targetSdk
    buildToolsVersion kau.Versions.buildTools

    androidGitVersion {
        codeFormat = 'MMNNPPXX'
        format = '%tag%%-count%%-commit%'
        prefix 'v'
    }

    defaultConfig {
        applicationId "com.dark.mode.night.darkmode"
        minSdkVersion kau.Versions.minSdk
        targetSdkVersion Versions.targetSdk
        versionCode androidGitVersion.code()
        versionName androidGitVersion.name()
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/src/schemas".toString()]
            }
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${project.APP_ID}-${variant.buildType.name}.apk"
        }
    }

    lintOptions {
        warningsAsErrors true
        disable 'TrustAllX509TrustManager',
                'UnusedResources',
                'ContentDescription',
                'RtlSymmetry',
                'MissingTranslation'

        xmlReport false
        textReport true
        textOutput 'stdout'
    }

    dataBinding {
        enabled = true
    }

    def testKeystoreFile = file('../files/test.keystore')
    def testPropFile = file('../files/test.properties')
    def withTestSigning = testKeystoreFile.exists() && testPropFile.exists()

    def releaseKeystoreFile = file('../files/release.keystore')
    def releasePropFile = file('../files/release.properties')
    def withReleaseSigning = releaseKeystoreFile.exists() && releasePropFile.exists()

    signingConfigs {

        debug {
            storeFile file("../files/debug.keystore")
            storePassword "debugKey"
            keyAlias "debugKey"
            keyPassword "debugKey"
        }

        if (withTestSigning) {
            def testProps = new Properties()
            testPropFile.withInputStream { testProps.load(it) }

            test {
                storeFile testKeystoreFile
                storePassword testProps.getProperty('storePassword')
                keyAlias testProps.getProperty('keyAlias')
                keyPassword testProps.getProperty('keyPassword')
            }
        }

        if (withReleaseSigning) {
            def releaseProps = new Properties()
            releasePropFile.withInputStream { releaseProps.load(it) }

            release {
                storeFile releaseKeystoreFile
                storePassword releaseProps.getProperty('storePassword')
                keyAlias releaseProps.getProperty('keyAlias')
                keyPassword releaseProps.getProperty('keyPassword')
            }
        }

    }

    def compilerArgs = ["-Xuse-experimental=kotlin.Experimental" /*, "-XXLanguage:+InlineClasses"*/]

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            versionNameSuffix "-debug"
            signingConfig signingConfigs.debug
            resValue "string", "frost_name", "Frost Debug"
            resValue "string", "frost_web", "Frost Web Debug"
            ext.enableBugsnag = false

            kotlinOptions.freeCompilerArgs += compilerArgs
        }

        release {
            minifyEnabled true
            shrinkResources true
            if (withReleaseSigning) signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "frost_name", "Frost"
            resValue "string", "frost_web", "Frost Web"
        }
    }

    packagingOptions {
        pickFirst 'META-INF/core_release.kotlin_module'
        pickFirst 'META-INF/library_release.kotlin_module'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    androidExtensions {
        experimental = true
    }

}

node {
    version = '12.4.0'
    npmVersion = '6.9.0'
    download = true
    nodeModulesDir = file("${project.projectDir}/src/web")
}

task npmCi(type: NpmTask) {
    dependsOn npmSetup
    npmCommand = ["ci"]
}

task frostWebGen(type: NpmTask) {
    dependsOn npmCi
    group 'build'
    description 'Generate Frost web assets'
    args = ['run', 'compile']
}

preBuild.dependsOn(frostWebGen)

repositories {
    google()
    jcenter()
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation project(path: ':fb')
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(path: ':rating')
    implementation project(path: ':common-sdk')
    implementation project(path: ':libadengine')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'com.android.support:design:29.1.1'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.airbnb.android:lottie:2.7.0'

    implementation 'com.flurry.android:analytics:12.1.0@aar'
    implementation 'com.google.firebase:firebase-analytics:17.2.0'
    implementation "com.google.firebase:firebase-config:17.0.0"

    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'

    implementation 'com.google.firebase:firebase-ads:18.3.0'

    implementation 'com.android.support:multidex:1.0.3'

    implementation 'com.facebook.android:audience-network-sdk:5.+'

    implementation 'com.appsflyer:af-android-sdk:5.0.0'
    implementation 'com.android.installreferrer:installreferrer:1.0'
    //implementation 'com.github.bumptech.glide:glide:4.11.0'
    //annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    implementation 'com.android.billingclient:billing:2.0.3'
}

// Validates code and generates apk
task createGithubReleaseApk(type: GradleBuild) {
    tasks = ['spotlessCheck',
             'lintRelease',
             'assembleRelease']
}

def kotlinResolutions = ['kotlin-reflect',
                         'kotlin-stdlib',
                         'kotlin-stdlib-jdk7',
                         'kotlin-stdlib-jdk8']

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'org.jetbrains.kotlin' && requested.name in kotlinResolutions) {
            details.useVersion kau.Versions.kotlin
        }
    }
}

apply plugin: 'com.bugsnag.android.gradle'
apply plugin: 'com.google.gms.google-services'